/* 
 * Transport for London Unified API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace RoadStatus.DTO
{
    /// <summary>
    /// TflApiPresentationEntitiesRoadCorridor
    /// </summary>
    [DataContract]
    public partial class TflApiPresentationEntitiesRoadCorridor :  IEquatable<TflApiPresentationEntitiesRoadCorridor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TflApiPresentationEntitiesRoadCorridor" /> class.
        /// </summary>
        /// <param name="id">The Id of the Corridor e.g. \&quot;A406\&quot;.</param>
        /// <param name="displayName">The display name of the Corridor e.g. \&quot;North Circular (A406)\&quot;. This              may be identical to the Id..</param>
        /// <param name="group">The group name of the Corridor e.g. \&quot;Central London\&quot;. Most corridors are not grouped, in which case this field can be null..</param>
        /// <param name="statusSeverity">Standard multi-mode status severity code.</param>
        /// <param name="statusSeverityDescription">Description of the status severity as applied to RoadCorridors.</param>
        /// <param name="bounds">The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate              pair in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[1.641223,53.765721]]\&quot;.</param>
        /// <param name="envelope">The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon              in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\&quot;.</param>
        /// <param name="statusAggregationStartDate">The start of the period over which status has been aggregated, or null if this is the current corridor status..</param>
        /// <param name="statusAggregationEndDate">The end of the period over which status has been aggregated, or null if this is the current corridor status..</param>
        /// <param name="url">URL to retrieve this Corridor..</param>
        public TflApiPresentationEntitiesRoadCorridor(string id = default(string), string displayName = default(string), string group = default(string), string statusSeverity = default(string), string statusSeverityDescription = default(string), string bounds = default(string), string envelope = default(string), DateTime? statusAggregationStartDate = default(DateTime?), DateTime? statusAggregationEndDate = default(DateTime?), string url = default(string))
        {
            this.Id = id;
            this.DisplayName = displayName;
            this.Group = group;
            this.StatusSeverity = statusSeverity;
            this.StatusSeverityDescription = statusSeverityDescription;
            this.Bounds = bounds;
            this.Envelope = envelope;
            this.StatusAggregationStartDate = statusAggregationStartDate;
            this.StatusAggregationEndDate = statusAggregationEndDate;
            this.Url = url;
        }
        
        /// <summary>
        /// The Id of the Corridor e.g. \&quot;A406\&quot;
        /// </summary>
        /// <value>The Id of the Corridor e.g. \&quot;A406\&quot;</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The display name of the Corridor e.g. \&quot;North Circular (A406)\&quot;. This              may be identical to the Id.
        /// </summary>
        /// <value>The display name of the Corridor e.g. \&quot;North Circular (A406)\&quot;. This              may be identical to the Id.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The group name of the Corridor e.g. \&quot;Central London\&quot;. Most corridors are not grouped, in which case this field can be null.
        /// </summary>
        /// <value>The group name of the Corridor e.g. \&quot;Central London\&quot;. Most corridors are not grouped, in which case this field can be null.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Standard multi-mode status severity code
        /// </summary>
        /// <value>Standard multi-mode status severity code</value>
        [DataMember(Name="statusSeverity", EmitDefaultValue=false)]
        public string StatusSeverity { get; set; }

        /// <summary>
        /// Description of the status severity as applied to RoadCorridors
        /// </summary>
        /// <value>Description of the status severity as applied to RoadCorridors</value>
        [DataMember(Name="statusSeverityDescription", EmitDefaultValue=false)]
        public string StatusSeverityDescription { get; set; }

        /// <summary>
        /// The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate              pair in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[1.641223,53.765721]]\&quot;
        /// </summary>
        /// <value>The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate              pair in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[1.641223,53.765721]]\&quot;</value>
        [DataMember(Name="bounds", EmitDefaultValue=false)]
        public string Bounds { get; set; }

        /// <summary>
        /// The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon              in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\&quot;
        /// </summary>
        /// <value>The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon              in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\&quot;</value>
        [DataMember(Name="envelope", EmitDefaultValue=false)]
        public string Envelope { get; set; }

        /// <summary>
        /// The start of the period over which status has been aggregated, or null if this is the current corridor status.
        /// </summary>
        /// <value>The start of the period over which status has been aggregated, or null if this is the current corridor status.</value>
        [DataMember(Name="statusAggregationStartDate", EmitDefaultValue=false)]
        public DateTime? StatusAggregationStartDate { get; set; }

        /// <summary>
        /// The end of the period over which status has been aggregated, or null if this is the current corridor status.
        /// </summary>
        /// <value>The end of the period over which status has been aggregated, or null if this is the current corridor status.</value>
        [DataMember(Name="statusAggregationEndDate", EmitDefaultValue=false)]
        public DateTime? StatusAggregationEndDate { get; set; }

        /// <summary>
        /// URL to retrieve this Corridor.
        /// </summary>
        /// <value>URL to retrieve this Corridor.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TflApiPresentationEntitiesRoadCorridor {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  StatusSeverity: ").Append(StatusSeverity).Append("\n");
            sb.Append("  StatusSeverityDescription: ").Append(StatusSeverityDescription).Append("\n");
            sb.Append("  Bounds: ").Append(Bounds).Append("\n");
            sb.Append("  Envelope: ").Append(Envelope).Append("\n");
            sb.Append("  StatusAggregationStartDate: ").Append(StatusAggregationStartDate).Append("\n");
            sb.Append("  StatusAggregationEndDate: ").Append(StatusAggregationEndDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TflApiPresentationEntitiesRoadCorridor);
        }

        /// <summary>
        /// Returns true if TflApiPresentationEntitiesRoadCorridor instances are equal
        /// </summary>
        /// <param name="input">Instance of TflApiPresentationEntitiesRoadCorridor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TflApiPresentationEntitiesRoadCorridor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.StatusSeverity == input.StatusSeverity ||
                    (this.StatusSeverity != null &&
                    this.StatusSeverity.Equals(input.StatusSeverity))
                ) && 
                (
                    this.StatusSeverityDescription == input.StatusSeverityDescription ||
                    (this.StatusSeverityDescription != null &&
                    this.StatusSeverityDescription.Equals(input.StatusSeverityDescription))
                ) && 
                (
                    this.Bounds == input.Bounds ||
                    (this.Bounds != null &&
                    this.Bounds.Equals(input.Bounds))
                ) && 
                (
                    this.Envelope == input.Envelope ||
                    (this.Envelope != null &&
                    this.Envelope.Equals(input.Envelope))
                ) && 
                (
                    this.StatusAggregationStartDate == input.StatusAggregationStartDate ||
                    (this.StatusAggregationStartDate != null &&
                    this.StatusAggregationStartDate.Equals(input.StatusAggregationStartDate))
                ) && 
                (
                    this.StatusAggregationEndDate == input.StatusAggregationEndDate ||
                    (this.StatusAggregationEndDate != null &&
                    this.StatusAggregationEndDate.Equals(input.StatusAggregationEndDate))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.StatusSeverity != null)
                    hashCode = hashCode * 59 + this.StatusSeverity.GetHashCode();
                if (this.StatusSeverityDescription != null)
                    hashCode = hashCode * 59 + this.StatusSeverityDescription.GetHashCode();
                if (this.Bounds != null)
                    hashCode = hashCode * 59 + this.Bounds.GetHashCode();
                if (this.Envelope != null)
                    hashCode = hashCode * 59 + this.Envelope.GetHashCode();
                if (this.StatusAggregationStartDate != null)
                    hashCode = hashCode * 59 + this.StatusAggregationStartDate.GetHashCode();
                if (this.StatusAggregationEndDate != null)
                    hashCode = hashCode * 59 + this.StatusAggregationEndDate.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
